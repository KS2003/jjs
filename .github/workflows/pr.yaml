name: "ci"
on:
  pull_request: {}
  push:
    branches:
      - staging
      - trying
env:
  CI: 1
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0
  CARGO_BUILD_PIPELINING: "false"
jobs:
  style:
    name: style
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: check rust code formatting
        run: cargo jjs-check --no-default --rustfmt
      - name: run shellcheck
        run: cargo jjs-check --no-default --shellcheck
  clippy:
    name: clippy
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: run clippy
        run: cargo jjs-check --no-default --clippy
  cpp:
    name: cpp
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
        env:
          SECRET_ENABLED: ${{ secrets.SECRET_ENABLED }}
          PVS_NAME: ${{ secrets.PVS_NAME }}
          PVS_LICENSE_KEY: ${{ secrets.PVS_LICENSE_KEY }}
      - name: compile testlib
        run: cargo jjs-check --no-default --testlib
      - name: compile minion C example
        run: cargo jjs-check --no-default --minion-ffi-example
      - name: Run PVS
        run: cargo jjs-check --no-default --pvs
        env:
          SECRET_ENABLED: ${{ secrets.SECRET_ENABLED }}
  unit-tests:
    name: unit-tests
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: cargo jjs-test
        run: cargo jjs-test
  build:
    name: build
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: cargo jjs-build
        run: cargo jjs-build
  udeps:
    name: udeps
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: |
          bash scripts/ci-env.sh
          cargo install cargo-udeps
      - name: cargo-udeps
        run: cargo jjs-check --no-default --udeps

  e2e:
    name: e2e
    runs-on: "ubuntu-18.04"
    needs: build
    if: "false" # TODO
    steps:
      - uses: actions/checkout@v1
      - name: download jjs artifacts
        uses: actions/download-artifact@v1
        with:
          name: dist.tgz
          path: /opt/jjs
      - name: launch jjs
        run: docker-compose up --detach
      - name: run tests
        run: cargo jjs-test --integration-tests --skip-unit
      - name: collect logs
        if: always()
        run: docker-compose logs > logs.txt
      - name: upload logs
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: docker-compose-logs.txt
          path: ./logs.txt